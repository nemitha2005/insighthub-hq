'use client';

import { useState, useMemo, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { BarChart as BarChartIcon, PieChart as PieChartIcon, LineChart as LineChartIcon } from 'lucide-react';
import { detectColumnTypes } from '@/services/analysisService';
import { ChartConfig } from '@/lib/gemini';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
} from 'recharts';

interface BasicChartsProps {
  data: Record<string, any>[];
  aiConfig?: ChartConfig;
}

interface ChartDataPoint {
  [key: string]: any;
  name: string;
  value: number;
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658', '#FF7C7C'];

export function BasicCharts({ data, aiConfig }: BasicChartsProps) {
  const [chartType, setChartType] = useState('bar');
  const [xAxisColumn, setXAxisColumn] = useState<string | null>(null);
  const [yAxisColumn, setYAxisColumn] = useState<string | null>(null);
  const [aggregation, setAggregation] = useState<'sum' | 'average' | 'count' | 'max' | 'min'>('sum');
  const [chartTitle, setChartTitle] = useState<string>('');

  const columnTypes = useMemo(() => detectColumnTypes(data), [data]);
  const columns = Object.keys(columnTypes);

  useEffect(() => {
    if (aiConfig) {
      setChartType(aiConfig.chartType);
      setXAxisColumn(aiConfig.xAxis);
      setYAxisColumn(aiConfig.yAxis);
      setAggregation(aiConfig.aggregation);
      setChartTitle(aiConfig.title);
    }
  }, [aiConfig]);

  useMemo(() => {
    if (!aiConfig) {
      if (!xAxisColumn && columns.length > 0) {
        setXAxisColumn(columns[0]);
      }

      if (!yAxisColumn) {
        const numericColumn = columns.find((col) => columnTypes[col]?.type === 'number');
        setYAxisColumn(numericColumn || columns[1] || columns[0]);
      }

      if (!chartTitle) {
        setChartTitle('Data Visualization');
      }
    }
  }, [columns, columnTypes, xAxisColumn, yAxisColumn, chartTitle, aiConfig]);

  const chartData: ChartDataPoint[] = useMemo(() => {
    if (!xAxisColumn || !yAxisColumn || data.length === 0) {
      return [];
    }

    const groupedData = new Map<string, number[]>();
    const limitedData = data.slice(0, 50);

    limitedData.forEach((row) => {
      const xValue = String(row[xAxisColumn] || 'Undefined').slice(0, 30);
      const yValue = parseFloat(row[yAxisColumn]);

      if (!isNaN(yValue)) {
        if (!groupedData.has(xValue)) {
          groupedData.set(xValue, []);
        }
        groupedData.get(xValue)!.push(yValue);
      }
    });

    const result = Array.from(groupedData.entries())
      .map(([key, values]) => {
        let aggregatedValue: number;

        switch (aggregation) {
          case 'sum':
            aggregatedValue = values.reduce((sum, val) => sum + val, 0);
            break;
          case 'average':
            aggregatedValue = values.reduce((sum, val) => sum + val, 0) / values.length;
            break;
          case 'count':
            aggregatedValue = values.length;
            break;
          case 'max':
            aggregatedValue = Math.max(...values);
            break;
          case 'min':
            aggregatedValue = Math.min(...values);
            break;
          default:
            aggregatedValue = values.reduce((sum, val) => sum + val, 0);
        }

        const dataPoint: ChartDataPoint = {
          name: key,
          value: aggregatedValue,
        };
        dataPoint[xAxisColumn] = key;
        dataPoint[yAxisColumn] = aggregatedValue;
        return dataPoint;
      })
      .sort((a, b) => Number(b[yAxisColumn]) - Number(a[yAxisColumn]));

    return result;
  }, [data, xAxisColumn, yAxisColumn, aggregation]);

  if (data.length === 0) {
    return (
      <div className="text-center py-12">
        <p className="text-muted-foreground">No data available for visualization</p>
      </div>
    );
  }

  const formatTooltipValue = (value: number) => {
    return new Intl.NumberFormat().format(Number(value.toFixed(2)));
  };

  const formatAxisValue = (value: string) => {
    return value.length > 15 ? `${value.slice(0, 15)}...` : value;
  };

  const hasValidData = chartData.length > 0 && xAxisColumn && yAxisColumn;

  return (
    <div className="space-y-6">
      <Card className="bg-background/50 backdrop-blur-sm border-border">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>{chartTitle}</span>
            {aiConfig && <span className="text-sm font-normal text-muted-foreground">âœ¨ Generated by AI</span>}
          </CardTitle>
          {aiConfig && <p className="text-sm text-muted-foreground">{aiConfig.description}</p>}
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div>
              <label className="text-sm font-medium block mb-2">Chart Type</label>
              <Tabs value={chartType} onValueChange={setChartType} className="w-full">
                <TabsList className="w-full bg-background border border-border">
                  <TabsTrigger value="bar" className="flex-1">
                    <BarChartIcon className="h-4 w-4 mr-2" />
                    Bar
                  </TabsTrigger>
                  <TabsTrigger value="line" className="flex-1">
                    <LineChartIcon className="h-4 w-4 mr-2" />
                    Line
                  </TabsTrigger>
                  <TabsTrigger value="pie" className="flex-1">
                    <PieChartIcon className="h-4 w-4 mr-2" />
                    Pie
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            </div>

            <div>
              <label className="text-sm font-medium block mb-2">X-Axis (Category)</label>
              <Select value={xAxisColumn || undefined} onValueChange={setXAxisColumn}>
                <SelectTrigger className="bg-background border-border">
                  <SelectValue placeholder="Select column" />
                </SelectTrigger>
                <SelectContent className="bg-background border-border">
                  {columns.map((column) => (
                    <SelectItem key={column} value={column}>
                      {column}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium block mb-2">Y-Axis (Value)</label>
              <Select value={yAxisColumn || undefined} onValueChange={setYAxisColumn}>
                <SelectTrigger className="bg-background border-border">
                  <SelectValue placeholder="Select column" />
                </SelectTrigger>
                <SelectContent className="bg-background border-border">
                  {columns.map((column) => (
                    <SelectItem key={column} value={column}>
                      {column}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium block mb-2">Aggregation</label>
              <Select value={aggregation} onValueChange={(value: any) => setAggregation(value)}>
                <SelectTrigger className="bg-background border-border">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-background border-border">
                  <SelectItem value="sum">Sum</SelectItem>
                  <SelectItem value="average">Average</SelectItem>
                  <SelectItem value="count">Count</SelectItem>
                  <SelectItem value="max">Maximum</SelectItem>
                  <SelectItem value="min">Minimum</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="h-96 w-full">
            {hasValidData ? (
              <ResponsiveContainer width="100%" height="100%">
                {chartType === 'bar' ? (
                  <BarChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>
                    <CartesianGrid strokeDasharray="3 3" className="opacity-30" stroke="hsl(var(--border))" />
                    <XAxis
                      dataKey={xAxisColumn}
                      tick={{ fontSize: 12, fill: '#ffffff' }}
                      tickFormatter={formatAxisValue}
                      angle={-45}
                      textAnchor="end"
                      height={80}
                      stroke="#ffffff"
                    />
                    <YAxis
                      tick={{ fontSize: 12, fill: '#ffffff' }}
                      tickFormatter={formatTooltipValue}
                      stroke="#ffffff"
                    />
                    <Tooltip
                      formatter={(value: number) => [formatTooltipValue(value), `${yAxisColumn} (${aggregation})`]}
                      labelStyle={{ color: '#ffffff' }}
                      contentStyle={{
                        backgroundColor: 'hsl(var(--background))',
                        border: '1px solid hsl(var(--border))',
                        borderRadius: '8px',
                        color: '#ffffff',
                      }}
                    />
                    <Legend wrapperStyle={{ color: '#ffffff' }} />
                    <Bar dataKey={yAxisColumn} fill="#8884d8" radius={[4, 4, 0, 0]} />
                  </BarChart>
                ) : chartType === 'line' ? (
                  <LineChart data={chartData} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>
                    <CartesianGrid strokeDasharray="3 3" className="opacity-30" stroke="hsl(var(--border))" />
                    <XAxis
                      dataKey={xAxisColumn}
                      tick={{ fontSize: 12, fill: '#ffffff' }}
                      tickFormatter={formatAxisValue}
                      angle={-45}
                      textAnchor="end"
                      height={80}
                      stroke="#ffffff"
                    />
                    <YAxis
                      tick={{ fontSize: 12, fill: '#ffffff' }}
                      tickFormatter={formatTooltipValue}
                      stroke="#ffffff"
                    />
                    <Tooltip
                      formatter={(value: number) => [formatTooltipValue(value), `${yAxisColumn} (${aggregation})`]}
                      labelStyle={{ color: '#ffffff' }}
                      contentStyle={{
                        backgroundColor: 'hsl(var(--background))',
                        border: '1px solid hsl(var(--border))',
                        borderRadius: '8px',
                        color: '#ffffff',
                      }}
                    />
                    <Legend wrapperStyle={{ color: '#ffffff' }} />
                    <Line
                      type="monotone"
                      dataKey={yAxisColumn}
                      stroke="#8884d8"
                      strokeWidth={3}
                      dot={{ fill: '#8884d8', strokeWidth: 2, r: 4 }}
                      activeDot={{ r: 6, stroke: '#8884d8', strokeWidth: 2 }}
                    />
                  </LineChart>
                ) : (
                  <PieChart margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>
                    <Pie
                      data={chartData.slice(0, 8)}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                      outerRadius={120}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {chartData.slice(0, 8).map((_, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip
                      formatter={(value: number) => [formatTooltipValue(value), `${yAxisColumn} (${aggregation})`]}
                      contentStyle={{
                        backgroundColor: 'hsl(var(--background))',
                        border: '1px solid hsl(var(--border))',
                        borderRadius: '8px',
                        color: 'hsl(var(--foreground))',
                      }}
                    />
                    <Legend wrapperStyle={{ color: 'hsl(var(--foreground))' }} />
                  </PieChart>
                )}
              </ResponsiveContainer>
            ) : (
              <div className="flex items-center justify-center h-full border-2 border-dashed border-border rounded-lg bg-background/30">
                <div className="text-center text-muted-foreground">
                  <p className="mb-2">Unable to generate chart</p>
                  <p className="text-sm">
                    {!xAxisColumn || !yAxisColumn
                      ? 'Please select both X-axis and Y-axis columns'
                      : 'No valid data found for selected columns'}
                  </p>
                </div>
              </div>
            )}
          </div>

          {chartData.length > 0 && (
            <div className="mt-4 text-sm text-muted-foreground">
              <p>
                Showing {chartData.length} data points
                {data.length > 50 && ` (limited from ${data.length} total rows)`}
                {aggregation !== 'sum' && ` using ${aggregation} aggregation`}
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
